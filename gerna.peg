text <- intro-null
        NAI-clause*
        text-part-2
        ( !text-1 joik-jek )?
        text-1?
        faho-clause
        EOF?
     -> text

intro-null <- `spaces?
              su-clause*
              intro-si-clause
           -> intro-null

text-part-2 <- ( CMENE-clause+ / indicators? )
               free*
            -> text-part-2

intro-si-clause <- si-clause? SI-clause*
                -> intro-si-clause

faho-clause <- ( FAhO-clause `.* )?
            -> faho-clause

; Please note that the "text-1" item in the text-1 production does
; *not* match the BNF. This is due to a bug in the BNF.  The change
; here was made to match grammar.300
text-1 <- I-clause
          ( jek / joik )?
          ( stag? BO-clause )?
          free*
          text-1?
       -> text-1-I
        / NIhO-clause+
          free*
          su-clause*
          paragraphs?
       -> text-1-NIhO
        / paragraphs

paragraphs <- paragraph
              ( NIhO-clause+ free* su-clause* paragraphs )?
           -> paragraphs

paragraph <- ( statement
             / fragment )
             ( I-clause
               !jek
               !joik
               !joik-jek
               free*
               ( statement / fragment )? )*
          -> paragraph

statement <- statement-1
          -> statement
           / prenex statement
          -> statement

statement-1 <- statement-2 ( I-clause joik-jek statement-2? )*

statement-2 <- statement-3
               ( I-clause ( jek / joik )? stag? BO-clause free* statement-2 )?
             / statement-3
               ( I-clause ( jek / joik )? stag? BO-clause free* )?

statement-3 <- sentence
             / tag? TUhE-clause free* text-1 TUhU-clause? free*

fragment <- prenex
          / terms VAU-clause? free*
          / ek free*
          / gihek free*
          / quantifier
          / NA-clause !JA-clause free*
          / relative-clauses
          / links
          / linkargs

prenex <- terms ZOhU-clause free*

sentence <- ( terms bridi-tail-sa* CU-clause? free* )?
            bridi-tail-sa*
            bridi-tail

sentence-sa <- sentence-start
               ( !sentence-start ( sa-word / SA-clause !sentence-start ) )*
               SA-clause &text-1

sentence-start <- I-pre
                / NIhO-pre

subsentence <- sentence
             / prenex subsentence

bridi-tail <- bridi-tail-1
              ( gihek
                stag?
                KE-clause free*
                bridi-tail
                KEhE-clause?
                free*
                tail-terms )?

bridi-tail-sa <- bridi-tail-start
                 ( term
                 / !bridi-tail-start
                   ( sa-word
                   / SA-clause
                     !bridi-tail-start ) )*
                 SA-clause
                 &bridi-tail

bridi-tail-start <- ME-clause
                  / NUhA-clause
                  / NU-clause
                  / NA-clause !KU-clause
                  / NAhE-clause !BO-clause
                  / selbri
                  / tag bridi-tail-start
                  / KE-clause bridi-tail-start
                  / bridi-tail

bridi-tail-1 <- bridi-tail-2
                ( gihek
                  !( stag? BO-clause )
                  !( stag? KE-clause )
                  free*
                  bridi-tail-2
                  tail-terms )*

bridi-tail-2 <- bridi-tail-3
                ( gihek
                  stag?
                  BO-clause
                  free*
                  bridi-tail-2
                  tail-terms )?

bridi-tail-3 <- selbri tail-terms
              / gek-sentence

gek-sentence <- gek
                subsentence
                gik
                subsentence
                tail-terms
              / tag?
                KE-clause
                free*
                gek-sentence
                KEhE-clause?
                free*
              / NA-clause
                free*
                gek-sentence

tail-terms <- terms? VAU-clause? free*

terms <- terms-1+

terms-1 <- terms-2 ( pehe-sa* PEhE-clause free* joik-jek terms-2 )*

terms-2 <- term ( cehe-sa* CEhE-clause free* term )*

pehe-sa <- PEhE-clause
           ( !PEhE-clause
             ( sa-word
             / SA-clause !PEhE-clause ) )*
           SA-clause

cehe-sa <- CEhE-clause
           ( !CEhE-clause
             ( sa-word
             / SA-clause !CEhE-clause ) )*
           SA-clause

term <- term-sa* term-1

term-1 <- sumti
        / ( !gek
            ( tag   / FA-clause  free* )
            ( sumti / KU-clause? free* ) )
        / termset
        / NA-clause
          KU-clause
          free*

term-sa <- term-start
           ( !term-start
             ( sa-word / SA-clause !term-start ) )*
           SA-clause
           &term-1

term-start <- term-1
            / LA-clause
            / LE-clause
            / LI-clause
            / LU-clause
            / LAhE-clause
            / quantifier term-start
            / gek sumti gik
            / FA-clause
            / tag term-start

termset <- gek-termset
         / NUhI-clause
           free*
           gek
           terms
           NUhU-clause?
           free*
           gik
           terms
           NUhU-clause?
           free*
         / NUhI-clause
           free*
           terms
           NUhU-clause?
           free*

gek-termset <- gek terms-gik-terms

terms-gik-terms <- term ( gik / terms-gik-terms ) term

sumti <- sumti-1 ( VUhO-clause free* relative-clauses )?
      -> sumti

sumti-1 <- sumti-2 ( joik-ek stag? KE-clause free* sumti KEhE-clause? free* )?

sumti-2 <- sumti-3 ( joik-ek sumti-3 )*

sumti-3 <- sumti-4 ( joik-ek stag? BO-clause free* sumti-3 )?

sumti-4 <- sumti-5
         / gek sumti gik sumti-4

sumti-5 <- quantifier? sumti-6 relative-clauses?
         / quantifier selbri KU-clause? free* relative-clauses?

sumti-6 <- ZO-clause free*
         / ZOI-clause free*
         / LOhU-clause free*
         / lerfu-string !MOI-clause BOI-clause? free*
        -> sumti-BOI
         / LU-clause text LIhU-clause? free*
        -> sumti-LU
         / ( LAhE-clause free*
           / NAhE-clause BO-clause free* )
           relative-clauses?
           sumti
           LUhU-clause?
           free*
        -> sumti-LAhE
         / KOhA-clause free*
        -> sumti-KOhA
         / LA-clause free* relative-clauses? CMENE-clause+ free*
        -> sumti-LA
         / ( LA-clause / LE-clause ) free* sumti-tail KU-clause? free*
        -> sumti-LE
         / li-clause

li-clause <- LI-clause free* mex LOhO-clause? free*
          -> li-clause

sumti-tail <- ( sumti-6 relative-clauses? )? sumti-tail-1
            / relative-clauses sumti-tail-1

sumti-tail-1 <- selbri relative-clauses?
              / quantifier selbri relative-clauses?
              / quantifier sumti

relative-clauses <- relative-clause
                    ( ZIhE-clause free* relative-clause )*

relative-clause <- relative-clause-sa* relative-clause-1

relative-clause-sa <- relative-clause-start
                      ( !relative-clause-start
                        ( sa-word / SA-clause !relative-clause-start ) )*
                      SA-clause
                      &relative-clause-1

relative-clause-1 <- GOI-clause free* term GEhU-clause? free*
                   / NOI-clause free* subsentence KUhO-clause? free*

relative-clause-start <- GOI-clause
                       / NOI-clause

selbri <- tag? selbri-1
       -> selbri

selbri-1 <- selbri-2
          / NA-clause free* selbri
         -> selbri-NA

selbri-2 <- selbri-3 ( CO-clause free* selbri-2 )?

selbri-3 <- selbri-4+

selbri-4 <- selbri-5
            ( joik-jek selbri-5
            / joik stag? KE-clause free* selbri-3 KEhE-clause? free* )*

selbri-5 <- selbri-6
            ( ( jek / joik ) stag? BO-clause free* selbri-5 )?

selbri-6 <- tanru-unit
            ( BO-clause free* selbri-6 )?
            / NAhE-clause? free* guhek selbri gik selbri-6

tanru-unit <- tanru-unit-1 ( CEI-clause free* tanru-unit-1 )*
           -> tanru-unit

tanru-unit-1 <- tanru-unit-2 linkargs?

; ** zei is part of BRIVLA-clause
tanru-unit-2 <- BRIVLA-clause
                free*
              / GOhA-clause
                RAhO-clause?
                free*
             -> tanru-unit-GOhA
              / KE-clause
                free*
                selbri-3
                KEhE-clause?
                free*
             -> tanru-unit-KE
              / ME-clause
                free*
                ( sumti / lerfu-string )
                MEhU-clause?
                free*
                MOI-clause?
                free*
             -> tanru-unit-ME
              / ( number / lerfu-string )
                MOI-clause
                free*
             -> tanru-unit-MOI
              / NUhA-clause
                free*
                mex-operator
             -> tanru-unit-NUhA
              / SE-clause
                free*
                tanru-unit-2
             -> tanru-unit-SE
              / JAI-clause free*
                tag?
                tanru-unit-2
             -> tanru-unit-JAI
              / NAhE-clause
                free*
                tanru-unit-2
             -> tanru-unit-NAhE
              / NU-clause
                NAI-clause?
                free*
                ( joik-jek NU-clause NAI-clause? free* )*
                subsentence
                KEI-clause?
                free*
             -> tanru-unit-NU

linkargs <- linkargs-sa* linkargs-1
         -> linkargs

linkargs-1 <- BE-clause free* term links? BEhO-clause? free*
           -> linkargs-1

linkargs-sa <- linkargs-start
               ( !linkargs-start ( sa-word / SA-clause !linkargs-start ) )*
               SA-clause
               &linkargs-1
            -> linkargs-sa

linkargs-start <- BE-clause

links <- links-sa* links-1
      -> links

links-1 <- BEI-clause free* term links?
        -> links-1

links-sa <- links-start
            ( !links-start ( sa-word / SA-clause !links-start ) )*
            SA-clause
            &links-1
         -> links-sa

links-start <- BEI-clause

quantifier <- number
              !MOI-clause
              BOI-clause?
              free*
           -> quantifier-BOI
            / VEI-clause
              free*
              mex
              VEhO-clause?
              free*
           -> quantifier-VEI

mex <- mex-sa* mex-0
    -> mex

mex-0 <- mex-1 ( operator mex-1 )* / rp-clause

mex-sa <- mex-start
          ( !mex-start ( sa-word / SA-clause !mex-start ) )*
          SA-clause
          &mex-0

mex-start <- FUhA-clause
           / PEhO-clause
           / operand-start

rp-clause <- FUhA-clause free* rp-expression

mex-1 <- mex-2 ( BIhE-clause free* operator mex-1 )?

mex-2 <- operand / mex-forethought

; This is just to make for clearer parse trees
mex-forethought <- PEhO-clause?
                   free*
                   operator
                   fore-operands
                   KUhE-clause?
                   free*

fore-operands <- mex-2+

;li fu'a reboi ci pi'i voboi mu pi'i su'i reboi ci vu'u su'i du li rexa
;rp-expression <- rp-operand rp-operand operator
;rp-operand <- operand / rp-expression
; AKA (almost; this one allows a single operand; above does not.
;rp-expression <- rp-expression rp-expression operator / operand

; Right recursive version.
rp-expression <- operand rp-expression-tail
rp-expression-tail <- ( rp-expression operator rp-expression-tail )?

operator <- operator-sa*
            operator-0

operator-0 <- operator-1
              ( joik-jek operator-1
              / joik stag? KE-clause free* operator KEhE-clause? free* )*

operator-sa <- operator-start
               ( !operator-start
                 ( sa-word / SA-clause !operator-start ) )*
               SA-clause
               &operator-0

operator-start <- guhek
                / KE-clause
                / SE-clause? NAhE-clause
                / SE-clause? MAhO-clause
                / SE-clause? VUhU-clause

operator-1 <- operator-2
            / guhek operator-1 gik operator-2
            / operator-2 ( jek / joik ) stag? BO-clause free* operator-1

operator-2 <- mex-operator
            / KE-clause free* operator KEhE-clause? free*

mex-operator <- SE-clause
                free*
                mex-operator
              / NAhE-clause free* mex-operator
              / MAhO-clause free* mex TEhU-clause? free*
              / NAhU-clause free* selbri TEhU-clause? free*
              / VUhU-clause free*

operand <- operand-sa* operand-0

operand-0 <- operand-1
             ( joik-ek stag? KE-clause free* operand KEhE-clause? free* )?

operand-sa <- operand-start
              ( !operand-start ( sa-word / SA-clause !operand-start ) )*
              SA-clause &operand-0

operand-start <- quantifier
               / lerfu-word
               / NIhE-clause
               / MOhE-clause
               / JOhI-clause
               / gek
               / LAhE-clause
               / NAhE-clause

operand-1 <- operand-2 ( joik-ek operand-2 )*

operand-2 <- operand-3 ( joik-ek stag? BO-clause free* operand-2 )?

operand-3 <- quantifier
           / lerfu-string !MOI-clause BOI-clause? free*
          -> operand-BOI
           / NIhE-clause free* selbri TEhU-clause? free*
           / MOhE-clause free* sumti TEhU-clause? free*
           / JOhI-clause free* mex-2+ TEhU-clause? free*
           / gek operand gik operand-3
           / ( LAhE-clause free*
             / NAhE-clause BO-clause free* )
             operand
             LUhU-clause?
             free*

number <- PA-clause ( PA-clause / lerfu-word )*
       -> number

lerfu-string <- lerfu-word ( PA-clause / lerfu-word )*
             -> lerfu-string

; ** BU clauses are part of BY-clause
lerfu-word <- BY-clause
            / LAU-clause lerfu-word
            / TEI-clause lerfu-string FOI-clause

ek <- NA-clause? SE-clause? A-clause NAI-clause?

gihek <- gihek-sa* gihek-1

gihek-1 <- NA-clause? SE-clause? GIhA-clause NAI-clause?

gihek-sa <- gihek-1
            ( !gihek-1 ( sa-word / SA-clause !gihek-1 ) )*
            SA-clause &gihek

jek <- NA-clause? SE-clause? JA-clause NAI-clause?

joik <- SE-clause? JOI-clause NAI-clause?
      / interval
      / GAhO-clause interval GAhO-clause

interval <- SE-clause? BIhI-clause NAI-clause?

joik-ek <- joik-ek-sa* joik-ek-1

joik-ek-1 <- ( joik free* / ek free* )

joik-ek-sa <- joik-ek-1
              ( !joik-ek-1 ( sa-word / SA-clause !joik-ek-1 ) )*
              SA-clause
              &joik-ek

joik-jek <- joik free*
          / jek free*

gek <- SE-clause? GA-clause NAI-clause? free*
     / joik GI-clause free*
     / stag gik

guhek <- SE-clause? GUhA-clause NAI-clause? free*

gik <- GI-clause NAI-clause? free*

tag <- tense-modal ( joik-jek tense-modal )*

stag <- simple-tense-modal ( ( jek / joik ) simple-tense-modal )*
      / tense-modal ( joik-jek tense-modal )*

tense-modal <- simple-tense-modal free*
             / FIhO-clause free* selbri FEhU-clause? free*

simple-tense-modal <- NAhE-clause?
                      SE-clause?
                      BAI-clause
                      NAI-clause?
                      KI-clause?
                    / NAhE-clause?
                      ( ( ( time space? / space time? ) CAhA-clause )
                      / ( time space? / space time? )
                      / CAhA-clause )
                      KI-clause?
                    / KI-clause
                    / CUhE-clause

time <- ZI-clause
        time-offset*
        ( ZEhA-clause ( PU-clause NAI-clause? )? )?
        interval-property*
      / ZI-clause?
        time-offset+
        ( ZEhA-clause ( PU-clause NAI-clause? )? )?
        interval-property*
      / ZI-clause?
        time-offset*
        ZEhA-clause
        ( PU-clause NAI-clause? )?
        interval-property*
      / ZI-clause?
        time-offset*
        ( ZEhA-clause ( PU-clause NAI-clause? )? )?
        interval-property+

time-offset <- PU-clause NAI-clause? ZI-clause?

space <- VA-clause
         space-offset*
         space-interval?
         ( MOhI-clause space-offset )?
       / VA-clause?
         space-offset+
         space-interval?
         ( MOhI-clause space-offset )?
       / VA-clause?
         space-offset*
         space-interval
         ( MOhI-clause space-offset )?
       / VA-clause?
         space-offset*
         space-interval?
         MOhI-clause
         space-offset

space-offset <- FAhA-clause
                NAI-clause?
                VA-clause?

space-interval <- ( VEhA-clause / VIhA-clause / VEhA-clause VIhA-clause )
                  ( FAhA-clause NAI-clause? )?
                  space-int-props
                / ( VEhA-clause / VIhA-clause / VEhA-clause VIhA-clause )
                  ( FAhA-clause NAI-clause? )?
                / space-int-props

space-int-props <- ( FEhE-clause interval-property )+

interval-property <- number ROI-clause NAI-clause?
                   / TAhE-clause NAI-clause?
                   / ZAhO-clause NAI-clause?

free <- SEI-clause
        free*
        ( terms CU-clause? free* )?
        selbri
        SEhU-clause?
     -> free-SEI
      / SOI-clause
        free*
        sumti
        sumti?
        SEhU-clause?
     -> free-SOI
      / vocative
        relative-clauses?
        selbri
        relative-clauses?
        DOhU-clause?
     -> free-vocative-selbri
      / vocative
        relative-clauses?
        CMENE-clause+
        free*
        relative-clauses?
        DOhU-clause?
     -> free-vocative-cmene
      / vocative
        sumti?
        DOhU-clause?
     -> free-vocative-sumti
      / ( number / lerfu-string ) MAI-clause
     -> free-MAI
      / TO-clause
        text
        TOI-clause?
     -> free-TO
      / xi-clause

xi-clause <- XI-clause free* ( number / lerfu-string ) BOI-clause?
          -> xi-clause-BOI
           / XI-clause free* VEI-clause free* mex VEhO-clause?
          -> xi-clause-VEI

vocative <- ( COI-clause NAI-clause? )* DOI-clause
         -> vocative
          / ( COI-clause NAI-clause? )+
         -> vocative

indicators <- FUhE-clause? indicator+
           -> indicators

indicator <- ( ( UI-clause / CAI-clause ) NAI-clause?
             / DAhO-clause
             / FUhO-clause )
             !BU-clause
          -> indicator


; ****************
; Magic Words
; ****************

zei-clause <- pre-clause zei-clause-no-pre
           -> zei-clause
zei-clause-no-pre <- pre-zei-bu ( zei-tail? bu-tail )* zei-tail post-clause

bu-clause <- pre-clause bu-clause-no-pre
          -> bu-clause

bu-clause-no-pre <- pre-zei-bu ( bu-tail? zei-tail )* bu-tail post-clause

zei-tail <- ( ZEI-clause any-word )+
bu-tail <- BU-clause+

pre-zei-bu <- ( !BU-clause
                !ZEI-clause
                !SI-clause
                !SA-clause
                !SU-clause
                !FAhO-clause
                any-word-SA-handling )
              si-clause?

; -- General Morphology Issues
;
; 1.  Spaces (including '.y') and UI are eaten *after* a word.
;
; 3.  BAhE is eaten *before* a word.

; Handling of what can go after a cmavo
post-clause <- `spaces? si-clause? !ZEI-clause !BU-clause indicators*
            -> post-clause

pre-clause <- BAhE-clause?
           -> pre-clause

any-word-SA-handling <- BRIVLA-pre
                      / known-cmavo-SA
                      / CMAVO-pre
                      / CMENE-pre

known-cmavo-SA <- A-pre
                / BAI-pre
                / BAhE-pre
                / BE-pre
                / BEI-pre
                / BEhO-pre
                / BIhE-pre
                / BIhI-pre
                / BO-pre
                / BOI-pre
                / BU-pre
                / BY-pre
                / CAI-pre
                / CAhA-pre
                / CEI-pre
                / CEhE-pre
                / CO-pre
                / COI-pre
                / CU-pre
                / CUhE-pre
                / DAhO-pre
                / DOI-pre
                / DOhU-pre
                / FA-pre
                / FAhA-pre
                / FEhE-pre
                / FEhU-pre
                / FIhO-pre
                / FOI-pre
                / FUhA-pre
                / FUhE-pre
                / FUhO-pre
                / GA-pre
                / GAhO-pre
                / GEhU-pre
                / GI-pre
                / GIhA-pre
                / GOI-pre
                / GOhA-pre
                / GUhA-pre
                / I-pre
                / JA-pre
                / JAI-pre
                / JOI-pre
                / JOhI-pre
                / KE-pre
                / KEI-pre
                / KEhE-pre
                / KI-pre
                / KOhA-pre
                / KU-pre
                / KUhE-pre
                / KUhO-pre
                / LA-pre
                / LAU-pre
                / LAhE-pre
                / LE-pre
                / LEhU-pre
                / LI-pre
                / LIhU-pre
                / LOhO-pre
                / LOhU-pre
                / LU-pre
                / LUhU-pre
                / MAI-pre
                / MAhO-pre
                / ME-pre
                / MEhU-pre
                / MOI-pre
                / MOhE-pre
                / MOhI-pre
                / NA-pre
                / NAI-pre
                / NAhE-pre
                / NAhU-pre
                / NIhE-pre
                / NIhO-pre
                / NOI-pre
                / NU-pre
                / NUhA-pre
                / NUhI-pre
                / NUhU-pre
                / PA-pre
                / PEhE-pre
                / PEhO-pre
                / PU-pre
                / RAhO-pre
                / ROI-pre
                / SA-pre
                / SE-pre
                / SEI-pre
                / SEhU-pre
                / SI-clause
                / SOI-pre
                / SU-pre
                / TAhE-pre
                / TEI-pre
                / TEhU-pre
                / TO-pre
                / TOI-pre
                / TUhE-pre
                / TUhU-pre
                / UI-pre
                / VA-pre
                / VAU-pre
                / VEI-pre
                / VEhA-pre
                / VEhO-pre
                / VIhA-pre
                / VUhO-pre
                / VUhU-pre
                / XI-pre
                / ZAhO-pre
                / ZEI-pre
                / ZEhA-pre
                / ZI-pre
                / ZIhE-pre
                / ZO-pre
                / ZOI-pre
                / ZOhU-pre

; SU clauses
su-clause <- ( erasable-clause / su-word )* SU-clause

; Handling of SI and interactions with zo and lo'u...le'u

si-clause <- ( ( erasable-clause / si-word / SA-clause )
               si-clause?
               SI-clause )+

erasable-clause <- bu-clause-no-pre
                   !ZEI-clause
                   !BU-clause
                 / zei-clause-no-pre
                   !ZEI-clause
                   !BU-clause

sa-word <- pre-zei-bu

si-word <- pre-zei-bu

su-word <- !NIhO-clause
           !LU-clause
           !TUhE-clause
           !TO-clause
           !SU-clause
           !FAhO-clause
           any-word-SA-handling

BRIVLA-clause <- BRIVLA-pre BRIVLA-post / zei-clause
BRIVLA-pre    <- pre-clause BRIVLA `spaces?
BRIVLA-post   <- post-clause

CMENE-clause <- CMENE-pre CMENE-post
CMENE-pre    <- pre-clause CMENE `spaces?
CMENE-post   <- post-clause

;CMAVO-clause <- CMAVO-pre CMAVO-post
CMAVO-pre    <- pre-clause CMAVO `spaces?
;CMAVO-post   <- post-clause

;         eks; basic afterthought logical connectives
A-clause    <- A-pre A-post
            -> A-clause
A-pre       <- pre-clause A `spaces?
A-post      <- post-clause

;         modal operators
BAI-clause  <- BAI-pre BAI-post
BAI-pre     <- pre-clause BAI `spaces?
            -> BAI-clause
BAI-post    <- post-clause

;         next word intensifier
BAhE-clause <- ( BAhE-pre BAhE-post )+
            -> BAhE-clause
BAhE-pre    <- BAhE `spaces?
BAhE-post   <- si-clause? !ZEI-clause !BU-clause

;         sumti link to attach sumti to a selbri
BE-clause   <- BE-pre BE-post
            -> BE-clause
BE-pre      <- pre-clause BE `spaces?
BE-post     <- post-clause

;         multiple sumti separator between BE, BEI
BEI-clause  <- BEI-pre BEI-post
            -> BEI-clause
BEI-pre     <- pre-clause BEI `spaces?
BEI-post    <- post-clause

;         terminates BEBEI specified descriptors
BEhO-clause <- BEhO-pre BEhO-post
            -> BEhO-clause
BEhO-pre    <- pre-clause BEhO `spaces?
BEhO-post   <- post-clause

;         prefix for high-priority MEX operator
BIhE-clause <- BIhE-pre BIhE-post
            -> BIhE-clause
BIhE-pre    <- pre-clause BIhE `spaces?
BIhE-post   <- post-clause

;         interval component of JOI
BIhI-clause <- BIhI-pre BIhI-post
            -> BIhI-clause
BIhI-pre    <- pre-clause BIhI `spaces?
BIhI-post   <- post-clause

;         joins two units with shortest scope
BO-clause   <- BO-pre BO-post
            -> BO-clause
BO-pre      <- pre-clause BO `spaces?
BO-post     <- post-clause

;         number or lerfu-string terminator
BOI-clause  <- BOI-pre BOI-post
            -> bOI-clause
BOI-pre     <- pre-clause BOI `spaces?
BOI-post    <- post-clause

;         turns any word into a BY lerfu word
BU-clause   <- BU-pre BU-post
            -> BU-clause
BU-pre      <- pre-clause BU `spaces?
BU-post     <- `spaces?

;         individual lerfu words
BY-clause   <- BY-pre BY-post / bu-clause
            -> BY-clause
BY-pre      <- pre-clause BY `spaces?
BY-post     <- post-clause


;         specifies actualitypotentiality of tense
CAhA-clause <- CAhA-pre CAhA-post
            -> CAhA-clause
CAhA-pre    <- pre-clause CAhA `spaces?
CAhA-post   <- post-clause

;         afterthought intensity marker
CAI-clause  <- CAI-pre CAI-post
            -> CAI-clause
CAI-pre     <- pre-clause CAI `spaces?
CAI-post    <- post-clause

;         pro-bridi assignment operator
CEI-clause  <- CEI-pre CEI-post
            -> CEI-clause
CEI-pre     <- pre-clause CEI `spaces?
CEI-post    <- post-clause

;         afterthought term list connective
CEhE-clause <- CEhE-pre CEhE-post
            -> CEhE-clause
CEhE-pre    <- pre-clause CEhE `spaces?
CEhE-post   <- post-clause

;         names; require consonant end, then pause no
;           LA or DOI selma'o embedded, pause before if
;           vowel initial and preceded by a vowel

;         tanru inversion
CO-clause   <- CO-pre CO-post
            -> CO-clause
CO-pre      <- pre-clause CO `spaces?
CO-post     <- post-clause

COI-clause  <- COI-pre COI-post
            -> COI-clause
COI-pre     <- pre-clause COI `spaces?
COI-post    <- post-clause

;         vocative marker permitted inside names; must
;           always be followed by pause or DOI

;         separator between head sumti and selbri
CU-clause   <- CU-pre CU-post
            -> CU-clause
CU-pre      <- pre-clause CU `spaces?
CU-post     <- post-clause

;         tensemodal question
CUhE-clause <- CUhE-pre CUhE-post
            -> CUhE-clause
CUhE-pre    <- pre-clause CUhE `spaces?
CUhE-post   <- post-clause

;         cancel anaphoracataphora assignments
DAhO-clause <- DAhO-pre DAhO-post
            -> DAhO-clause
DAhO-pre    <- pre-clause DAhO `spaces?
DAhO-post   <- post-clause

;         vocative marker
DOI-clause  <- DOI-pre DOI-post
            -> DOI-clause
DOI-pre     <- pre-clause DOI `spaces?
DOI-post    <- post-clause

;         terminator for DOI-marked vocatives
DOhU-clause <- DOhU-pre DOhU-post
            -> DOhU-clause
DOhU-pre    <- pre-clause DOhU `spaces?
DOhU-post   <- post-clause

;         modifier head generic case tag
FA-clause   <- FA-pre FA-post
            -> FA-clause
FA-pre      <- pre-clause FA `spaces?
FA-post     <- post-clause

;         superdirections in space
FAhA-clause <- FAhA-pre FAhA-post
            -> FAhA-clause
FAhA-pre    <- pre-clause FAhA `spaces?
FAhA-post   <- post-clause

;         normally elided 'done pause' to indicate end
;           of utterance string

FAhO-clause <- pre-clause FAhO `spaces?
            -> FAhO-clause

;         space interval mod flag
FEhE-clause <- FEhE-pre FEhE-post
            -> FEhE-clause
FEhE-pre    <- pre-clause FEhE `spaces?
FEhE-post   <- post-clause

;         ends bridi to modal conversion
FEhU-clause <- FEhU-pre FEhU-post
            -> FEhU-clause
FEhU-pre    <- pre-clause FEhU `spaces?
FEhU-post   <- post-clause

;         marks bridi to modal conversion
FIhO-clause <- FIhO-pre FIhO-post
            -> FIhO-clause
FIhO-pre    <- pre-clause FIhO `spaces?
FIhO-post   <- post-clause

;         end compound lerfu
FOI-clause  <- FOI-pre FOI-post
            -> FOI-clause
FOI-pre     <- pre-clause FOI `spaces?
FOI-post    <- post-clause

;         reverse Polish flag
FUhA-clause <- FUhA-pre FUhA-post
            -> FUhA-clause
FUhA-pre    <- pre-clause FUhA `spaces?
FUhA-post   <- post-clause

;         open long scope for indicator
FUhE-clause <- FUhE-pre FUhE-post
            -> FUhE-clause
FUhE-pre    <- pre-clause FUhE `spaces?
FUhE-post   <- !BU-clause `spaces? !ZEI-clause !BU-clause

;         close long scope for indicator
FUhO-clause <- FUhO-pre FUhO-post
            -> FUhO-clause
FUhO-pre    <- pre-clause FUhO `spaces?
FUhO-post   <- post-clause

;         geks; forethought logical connectives
GA-clause   <- GA-pre GA-post
            -> GA-clause
GA-pre      <- pre-clause GA `spaces?
GA-post     <- post-clause

;         openclosed interval markers for BIhI
GAhO-clause <- GAhO-pre GAhO-post
            -> GAhO-clause
GAhO-pre    <- pre-clause GAhO `spaces?
GAhO-post   <- post-clause

;         marker ending GOI relative clauses
GEhU-clause <- GEhU-pre GEhU-post
            -> GEhU-clause
GEhU-pre    <- pre-clause GEhU `spaces?
GEhU-post   <- post-clause

;         forethought medial marker
GI-clause   <- GI-pre GI-post
            -> GI-clause
GI-pre      <- pre-clause GI `spaces?
GI-post     <- post-clause

;         logical connectives for bridi-tails
GIhA-clause <- GIhA-pre GIhA-post
            -> GIhA-clause
GIhA-pre    <- pre-clause GIhA `spaces?
GIhA-post   <- post-clause

;         attaches a sumti modifier to a sumti
GOI-clause  <- GOI-pre GOI-post
            -> GOI-clause
GOI-pre     <- pre-clause GOI `spaces?
GOI-post    <- post-clause

;         pro-bridi
GOhA-clause <- GOhA-pre GOhA-post
            -> GOhA-clause
GOhA-pre    <- pre-clause GOhA `spaces?
GOhA-post   <- post-clause

;         GEK for tanru units, corresponds to JEKs
GUhA-clause <- GUhA-pre GUhA-post
            -> GUhA-clause
GUhA-pre    <- pre-clause GUhA `spaces?
GUhA-post   <- post-clause

;         sentence link
I-clause    <- sentence-sa* I-pre I-post
            -> I-clause
I-pre       <- pre-clause I `spaces?
I-post      <- post-clause

;         jeks; logical connectives within tanru
JA-clause   <- JA-pre JA-post
            -> JA-clause
JA-pre      <- pre-clause JA `spaces?
JA-post     <- post-clause

;         modal conversion flag
JAI-clause  <- JAI-pre JAI-post
            -> JAI-clause
JAI-pre     <- pre-clause JAI `spaces?
JAI-post    <- post-clause

;         flags an array operand
JOhI-clause <- JOhI-pre JOhI-post
            -> JOhI-clause
JOhI-pre    <- pre-clause JOhI `spaces?
JOhI-post   <- post-clause

;         non-logical connectives
JOI-clause  <- JOI-pre JOI-post
            -> JOI-clause
JOI-pre     <- pre-clause JOI `spaces?
JOI-post    <- post-clause

;         left long scope marker
KE-clause   <- KE-pre KE-post
            -> KE-clause
KE-pre      <- pre-clause KE `spaces?
KE-post     <- post-clause

;         right terminator for KE groups
KEhE-clause <- KEhE-pre KEhE-post
            -> KEhE-clause
KEhE-pre    <- pre-clause KEhE `spaces?
KEhE-post   <- post-clause

;         right terminator, NU abstractions
KEI-clause  <- KEI-pre KEI-post
            -> KEI-clause
KEI-pre     <- pre-clause KEI `spaces?
KEI-post    <- post-clause

;         multiple utterance scope for tenses
KI-clause   <- KI-pre KI-post
            -> KI-clause
KI-pre      <- pre-clause KI `spaces?
KI-post     <- post-clause

;         sumti anaphora
KOhA-clause <- KOhA-pre KOhA-post
            -> KOhA-clause
KOhA-pre    <- pre-clause KOhA `spaces?
KOhA-post   <- post-clause

;         right terminator for descriptions, etc.
KU-clause   <- KU-pre KU-post
            -> KU-clause
KU-pre      <- pre-clause KU `spaces?
KU-post     <- post-clause

;         MEX forethought delimiter
KUhE-clause <- KUhE-pre KUhE-post
            -> KUhE-clause
KUhE-pre    <- pre-clause KUhE `spaces?
KUhE-post   <- post-clause

;         right terminator, NOI relative clauses
KUhO-clause <- KUhO-pre KUhO-post
            -> KUhO-clause
KUhO-pre    <- pre-clause KUhO `spaces?
KUhO-post   <- post-clause

;         name descriptors
LA-clause   <- LA-pre LA-post
            -> LA-clause
LA-pre      <- pre-clause LA `spaces?
LA-post     <- post-clause

;         lerfu prefixes
LAU-clause  <- LAU-pre LAU-post
            -> LAU-clause
LAU-pre     <- pre-clause LAU `spaces?
LAU-post    <- post-clause

;         sumti qualifiers
LAhE-clause <- LAhE-pre LAhE-post
            -> LAhE-clause
LAhE-pre    <- pre-clause LAhE `spaces?
LAhE-post   <- post-clause

;         sumti descriptors
LE-clause   <- LE-pre LE-post
            -> LE-clause
LE-pre      <- pre-clause LE `spaces?
LE-post     <- post-clause

;         possibly ungrammatical text right quote
LEhU-clause <- LEhU-pre LEhU-post
            -> LEhU-clause
LEhU-pre    <- pre-clause LEhU `spaces?
LEhU-post   <- `spaces?

;         convert number to sumti
LI-clause   <- LI-pre LI-post
            -> LI-clause
LI-pre      <- pre-clause LI `spaces?
LI-post     <- post-clause

;         grammatical text right quote
LIhU-clause <- LIhU-pre LIhU-post
            -> LIhU-clause
LIhU-pre    <- pre-clause LIhU `spaces?
LIhU-post   <- post-clause

;         elidable terminator for LI
LOhO-clause <- LOhO-pre LOhO-post
            -> LOhO-clause
LOhO-pre    <- pre-clause LOhO `spaces?
LOhO-post   <- post-clause

;         possibly ungrammatical text left quote
LOhU-clause <- LOhU-pre LOhU-post
            -> LOhU-clause
LOhU-pre    <- pre-clause LOhU
               `spaces?
               ( !LEhU any-word )*
               LEhU-clause
               `spaces?
LOhU-post   <- post-clause

;         grammatical text left quote
LU-clause   <- LU-pre LU-post
            -> LU-clause
LU-pre      <- pre-clause LU `spaces?
LU-post     <- post-clause

;         LAhE close delimiter
LUhU-clause <- LUhU-pre LUhU-post
            -> LUhU-clause
LUhU-pre    <- pre-clause LUhU `spaces?
LUhU-post   <- post-clause


;         change MEX expressions to MEX operators
MAhO-clause <- MAhO-pre MAhO-post
            -> MAhO-clause
MAhO-pre    <- pre-clause MAhO `spaces?
MAhO-post   <- post-clause

;         change numbers to utterance ordinals
MAI-clause  <- MAI-pre MAI-post
            -> MAI-clause
MAI-pre     <- pre-clause MAI `spaces?
MAI-post    <- post-clause

;         converts a sumti into a tanru_unit
ME-clause   <- ME-pre ME-post
            -> ME-clause
ME-pre      <- pre-clause ME `spaces?
ME-post     <- post-clause

;         terminator for ME
MEhU-clause <- MEhU-pre MEhU-post
            -> MEhU-clause
MEhU-pre    <- pre-clause MEhU `spaces?
MEhU-post   <- post-clause

;         change sumti to operand, inverse of LI
MOhE-clause <- MOhE-pre MOhE-post
            -> MOhE-clause
MOhE-pre    <- pre-clause MOhE `spaces?
MOhE-post   <- post-clause

;         motion tense marker
MOhI-clause <- MOhI-pre MOhI-post
            -> MOhI-clause
MOhI-pre    <- pre-clause MOhI `spaces?
MOhI-post   <- post-clause

;         change number to selbri
MOI-clause  <- MOI-pre MOI-post
            -> MOI-clause
MOI-pre     <- pre-clause MOI `spaces?
MOI-post    <- post-clause


;         bridi negation
NA-clause   <- NA-pre NA-post
            -> NA-clause
NA-pre      <- pre-clause NA `spaces?
NA-post     <- post-clause

;         attached to words to negate them
NAI-clause  <- NAI-pre NAI-post
            -> NAI-clause
NAI-pre     <- pre-clause NAI `spaces?
NAI-post    <- post-clause

;         scalar negation
NAhE-clause <- NAhE-pre NAhE-post
            -> NAhE-clause
NAhE-pre    <- pre-clause NAhE `spaces?
NAhE-post   <- post-clause

;         change a selbri into an operator
NAhU-clause <- NAhU-pre NAhU-post
            -> NAhU-clause
NAhU-pre    <- pre-clause NAhU `spaces?
NAhU-post   <- post-clause

;         change selbri to operand; inverse of MOI
NIhE-clause <- NIhE-pre NIhE-post
            -> NIhE-clause
NIhE-pre    <- pre-clause NIhE `spaces?
NIhE-post   <- post-clause

;         new paragraph; change of subject
NIhO-clause <- sentence-sa* NIhO-pre NIhO-post
            -> NIhO-clause
NIhO-pre    <- pre-clause NIhO `spaces?
NIhO-post   <- su-clause* post-clause

;         attaches a subordinate clause to a sumti
NOI-clause  <- NOI-pre NOI-post
            -> NOI-clause
NOI-pre     <- pre-clause NOI `spaces?
NOI-post    <- post-clause

;         abstraction
NU-clause   <- NU-pre NU-post
            -> NU-clause
NU-pre      <- pre-clause NU `spaces?
NU-post     <- post-clause

;         change operator to selbri; inverse of MOhE
NUhA-clause <- NUhA-pre NUhA-post
            -> NUhA-clause
NUhA-pre    <- pre-clause NUhA `spaces?
NUhA-post   <- post-clause

;         marks the start of a termset
NUhI-clause <- NUhI-pre NUhI-post
            -> NUhI-clause
NUhI-pre    <- pre-clause NUhI `spaces?
NUhI-post   <- post-clause

;         marks the middle and end of a termset
NUhU-clause <- NUhU-pre NUhU-post
            -> NUhU-clause
NUhU-pre    <- pre-clause NUhU `spaces?
NUhU-post   <- post-clause

;         numbers and numeric punctuation
PA-clause   <- PA-pre PA-post
            -> PA-clause
PA-pre      <- pre-clause PA `spaces?
PA-post     <- post-clause

;         afterthought termset connective prefix
PEhE-clause <- PEhE-pre PEhE-post
            -> PEhE-clause
PEhE-pre    <- pre-clause PEhE `spaces?
PEhE-post   <- post-clause

;         forethought (Polish) flag
PEhO-clause <- PEhO-pre PEhO-post
            -> PEhO-clause
PEhO-pre    <- pre-clause PEhO `spaces?
PEhO-post   <- post-clause

;         directions in time
PU-clause   <- PU-pre PU-post
            -> PU-clause
PU-pre      <- pre-clause PU `spaces?
PU-post     <- post-clause

;         flag for modified interpretation of GOhI
RAhO-clause <- RAhO-pre RAhO-post
            -> RAhO-clause
RAhO-pre    <- pre-clause RAhO `spaces?
RAhO-post   <- post-clause

;         converts number to extensional tense
ROI-clause  <- ROI-pre ROI-post
            -> ROI-clause
ROI-pre     <- pre-clause ROI `spaces?
ROI-post    <- post-clause

SA-clause   <- SA-pre SA-post
            -> SA-clause
SA-pre      <- pre-clause SA `spaces?
SA-post     <- `spaces?

;         metalinguistic eraser to the beginning of
;           the current utterance

;         conversions
SE-clause   <- SE-pre SE-post
            -> SE-clause
SE-pre      <- pre-clause SE `spaces?
SE-post     <- post-clause

;         metalinguistic bridi insert marker
SEI-clause  <- SEI-pre SEI-post
            -> SEI-clause
SEI-pre     <- pre-clause SEI `spaces?
SEI-post    <- post-clause

;         metalinguistic bridi end marker
SEhU-clause <- SEhU-pre SEhU-post
            -> SEhU-clause
SEhU-pre    <- pre-clause SEhU `spaces?
SEhU-post   <- post-clause

;         metalinguistic single word eraser
SI-clause   <- `spaces? SI `spaces?
            -> SI-clause

;         reciprocal sumti marker
SOI-clause  <- SOI-pre SOI-post
            -> SOI-clause
SOI-pre     <- pre-clause SOI `spaces?
SOI-post    <- post-clause

;         metalinguistic eraser of the entire text
SU-clause   <- SU-pre SU-post
            -> SU-clause
SU-pre      <- pre-clause SU `spaces?
SU-post     <- post-clause

;         tense interval properties
TAhE-clause <- TAhE-pre TAhE-post
            -> TAhE-clause
TAhE-pre    <- pre-clause TAhE `spaces?
TAhE-post   <- post-clause

;         closing gap for MEX constructs
TEhU-clause <- TEhU-pre TEhU-post
            -> TEhU-clause
TEhU-pre    <- pre-clause TEhU `spaces?
TEhU-post   <- post-clause

;         start compound lerfu
TEI-clause  <- TEI-pre TEI-post
            -> TEI-clause
TEI-pre     <- pre-clause TEI `spaces?
TEI-post    <- post-clause

;         left discursive parenthesis
TO-clause   <- TO-pre TO-post
            -> TO-clause
TO-pre      <- pre-clause TO `spaces?
TO-post     <- post-clause

;         right discursive parenthesis
TOI-clause  <- TOI-pre TOI-post
            -> TOI-clause
TOI-pre     <- pre-clause TOI `spaces?
TOI-post    <- post-clause

;         multiple utterance scope mark
TUhE-clause <- TUhE-pre TUhE-post
            -> TUhE-clause
TUhE-pre    <- pre-clause TUhE `spaces?
TUhE-post   <- su-clause* post-clause

;         multiple utterance end scope mark
TUhU-clause <- TUhU-pre TUhU-post
            -> TUhU-clause
TUhU-pre    <- pre-clause TUhU `spaces?
TUhU-post   <- post-clause

;         attitudinals, observationals, discursives
UI-clause   <- UI-pre UI-post
            -> UI-clause
UI-pre      <- pre-clause UI `spaces?
UI-post     <- post-clause

;         distance in space-time
VA-clause   <- VA-pre VA-post
            -> VA-clause
VA-pre      <- pre-clause VA `spaces?
VA-post     <- post-clause

;         end simple bridi or bridi-tail
VAU-clause  <- VAU-pre VAU-post
            -> VAU-clause
VAU-pre     <- pre-clause VAU `spaces?
VAU-post    <- post-clause

;         left MEX bracket
VEI-clause  <- VEI-pre VEI-post
            -> VEI-clause
VEI-pre     <- pre-clause VEI `spaces?
VEI-post    <- post-clause

;         right MEX bracket
VEhO-clause <- VEhO-pre VEhO-post
            -> VEhO-clause
VEhO-pre    <- pre-clause VEhO `spaces?
VEhO-post   <- post-clause

;         MEX operator
VUhU-clause <- VUhU-pre VUhU-post
            -> VUhU-clause
VUhU-pre    <- pre-clause VUhU `spaces?
VUhU-post   <- post-clause

;         space-time interval size
VEhA-clause <- VEhA-pre VEhA-post
            -> VEhA-clause
VEhA-pre    <- pre-clause VEhA `spaces?
VEhA-post   <- post-clause

;         space-time dimensionality marker
VIhA-clause <- VIhA-pre VIhA-post
            -> VIhA-clause
VIhA-pre    <- pre-clause VIhA `spaces?
VIhA-post   <- post-clause

VUhO-clause <- VUhO-pre VUhO-post
            -> VUhO-clause
VUhO-pre    <- pre-clause VUhO `spaces?
VUhO-post   <- post-clause

; glue between logically connected sumti and relative clauses

;         subscripting operator
XI-clause   <- XI-pre XI-post
            -> XI-clause
XI-pre      <- pre-clause XI `spaces?
XI-post     <- post-clause

;         hesitation
; Very very special case.  Handled in the morphology section.
; Y-clause    <- `spaces? Y `spaces?
;             -> Y-clause

;         event properties - inchoative, etc.
ZAhO-clause <- ZAhO-pre ZAhO-post
            -> ZAhO-clause
ZAhO-pre    <- pre-clause ZAhO `spaces?
ZAhO-post   <- post-clause

;         time interval size tense
ZEhA-clause <- ZEhA-pre ZEhA-post
            -> ZEhA-clause
ZEhA-pre    <- pre-clause ZEhA `spaces?
ZEhA-post   <- post-clause

;         lujvo glue
ZEI-clause  <- ZEI-pre ZEI-post
            -> ZEI-clause
ZEI-pre     <- pre-clause ZEI `spaces?
ZEI-post    <- `spaces?

;         time distance tense
ZI-clause   <- ZI-pre ZI-post
            -> ZI-clause
ZI-pre      <- pre-clause ZI `spaces?
ZI-post     <- post-clause

;         conjoins relative clauses
ZIhE-clause <- ZIhE-pre ZIhE-post
            -> ZIhE-clause
ZIhE-pre    <- pre-clause ZIhE `spaces?
ZIhE-post   <- post-clause

;         single word metalinguistic quote marker
ZO-clause   <- ZO-pre ZO-post
            -> ZO-clause
ZO-pre      <- pre-clause ZO `spaces? any-word `spaces?
ZO-post     <- post-clause

;         delimited quote marker
ZOI-clause  <- ZOI-pre ZOI-post
            -> ZOI-clause
ZOI-pre     <- pre-clause ZOI `spaces? zoi-open zoi-word* zoi-close `spaces?
ZOI-post    <- post-clause

;         prenex terminator (not elidable)
ZOhU-clause <- ZOhU-pre ZOhU-post
ZOhU-pre    <- pre-clause ZOhU `spaces?
ZOhU-post   <- post-clause

zoi-open  <- any-word `spaces?
          -| zoi-open
zoi-word  <- any-word `spaces?
          -| zoi-word
zoi-close <- any-word `spaces?
          -| zoi-close
